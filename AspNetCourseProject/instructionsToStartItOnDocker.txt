So how you start the app in dockers

1 you need  Docker CE what it would be it matters on your operational system either 
Docker for linyx or Docker for Windows
The caveat here is that on linux you have only linux containers while on Windows you can choose your container type
either linux or windows!

2 you will need to pull sqlserver image: 
docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=x' -p 1543:1543 --name sqlserver -d microsoft/mssql-server-linux
this command should do this for you. What it does,it starts a container on your local enviornment. And if you dont have the image it wil pull it for you automatically. Why the 1543 port because the default 1434 can be taken by your localy installed mssql or whatever. SA_PASSWORD - you should type your chosen password here it is up to you. ACCEPT_EULA - this just say at the docker and the container that you agree no with the rules. -name this is optional but don't change it for now.
Keep in mind ACCEPT_EULA maybe tricky I made it work with double " instead of single but I dont know why or what so keeping it as by documentation for now in the example.

3 next we need to copy our sql.script with the db shema you do it by executing :
docker cp ....\AspNetCourseProjectscript.sql sqlserver:/script.sql
at the place of ... is your relative path to the script in the folder. This will tell the docker copy this script inside you
why we need it.Because if we start our app entity framework will throw exception.

4 Ok we now have our script but before we run it we need to create the database :
docker exec -it sqlserver /opt/mssql-tools/bin/sqlcmd -s localhost -U SA -P x

this will connect us interactively to our mssql container and to our sqlcmd inside it.So we write a simple query now
CREATE DATABASE 'BookCreatorAppDb' - the name is important as this is the name of the database in our app.
After this just type go and press enter. To execute command.
if everything is ok try it with a simple query over the db :
SELECT * from StoryTypes
and go + enter again
it should return empty table with 0 rows affected.
Now we are ready so ctrl + C to exit


5 you should run this command :
docker exec mssql /opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P SA_PASSWORD=x -i script.sql

this will execute the script we copied earlier and create the tables in the database we created in the previous command.
So now the only thing left for us is to build our image and run it!

6 Building our image:
First off you should be in the cmd in the directory of our dockerfile and then we simply type:
docker build -t app:default .
it will execute our file  app:default is optional and just to you this will set the name and tag for our image so you can use your imagination. This will build the image.

7 Getting our app on container:
 docker run -it --rm p 3000:80 --link sqlserver e SQLSERVER_HOST=sqlserver app:default
 
 This will run the image that we just created. It means interactive it is optional there is a lot of more options but they are not important right now. -rm means that once we stop our container it will be deleted from the  list. p 3000:80 this tell
 our container to listen at port 3000 as we exposed its port 80 now if we go to localhost:3000 it will open our app.
 SQLSERVER_HOST is self explanatory it tell the image which host to use and -link tell to which name container it should link.
 
 app:default it tells the docker which image to use if you change the names in the prevous command use your names here.
 Keep in mind sometimes it does not work. So you should type docker image ls  to get all images and copy/paste the image id 
 but  most of the times the name+ tag should work fine.
 
 So the image will start and you will see a normal start for asp net core app and the exposed port it listens. Open your browser and go to localhost:3000 and it should work. Use  user :ThatAdmin pass:admin to log as admin or just create normal user and have fun
 
 8 what can be changed. For sure I can create sqlserver image not using just the default and run the script on start ect.I should at some point create docker compose to start it all together and probably make an isolated network for only those 2 containers  but it works for now! 